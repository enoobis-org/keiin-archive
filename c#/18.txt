<Window x:Class="ExampleOfAnimationsN6._12._21.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ExampleOfAnimationsN6._12._21"
        mc:Ignorable="d"
        Title="Types of animations" Height="370" Width="600">
    <!--The style which makes a button increase its width
                when the mouse is over the button-->
    <Window.Resources>
        <Style x:Key="btnStyle" TargetType="Button">
            <Setter Property="Width" Value="200"/>
            <Setter Property="Height" Value="200"/>
            <!--This trigger will be fired when the mouse
                        over the button element-->
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Width" Value="300"/>
                    <Setter Property="Height" Value="300"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <TabControl>
        <TabItem Header="Example 1">
            <Canvas>
                <Button Style="{StaticResource btnStyle}" HorizontalAlignment="Center">
                    <Image Source="Images\stop-button.png"/>
                </Button>
            </Canvas>
        </TabItem>
        <TabItem Header="Example 2">
            <Canvas>
                <Canvas.Resources>
                    <!--Define Storyboard for the Button element-->
                    <Storyboard x:Key="sbBigScale">
                        <DoubleAnimation Duration="0:0:5" To="150"
                                         Storyboard.TargetProperty="button1"
                                         Storyboard.TargetName="Width"/>
                    </Storyboard>
                </Canvas.Resources>
                <Button x:Name="button1" Width="60" Height="30" Content="Click me!">
                    <!--When the Button's MouseEnter property becomes true,
                    the animation changes its width-->
                    <Button.Triggers>
                        <EventTrigger RoutedEvent="Button.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource sbBigScale}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </Button.Triggers>
                </Button>
            </Canvas>
        </TabItem>
        <TabItem Header="Example 3">
            <StackPanel Margin="10">
                <TextBlock Text="Linear animations change the property's value in a simple
                           way from one value to another" Margin="10"/>
                <Canvas>
                    <Canvas.Resources>
                        <Storyboard x:Key="sbMoveButton" RepeatBehavior="Forever">
                            <DoubleAnimation Duration="0:0:5" To="150"
                                             Storyboard.TargetProperty="(Canvas.Top)"
                                             Storyboard.TargetName="btnMover"/>
                        </Storyboard>
                    </Canvas.Resources>
                    <Button x:Name="btnMover" Width="60" Height="30" Content="Click me!"
                            Canvas.Top="10" Canvas.Left="10">
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.Click">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Storyboard="{StaticResource sbMoveButton}"/>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>
                </Canvas>
            </StackPanel>
        </TabItem>
        <TabItem Header="Example 4">
            <StackPanel Margin="10">
                <TextBlock Text="A key frame animation" Margin="10"/>
                <Canvas>
                    <Canvas.Resources>
                        <!--There are 2 DoubleAnimationUsingKeyFrame objects.
                        The first one for the Button's Canvas.Left property and
                        The second one for its Canvas.Top property-->
                        <Storyboard x:Key="sbMoveButtonWithKF" RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="forButtonKeyFrame"
                                                           Storyboard.TargetProperty="(Canvas.Left)">
                                <LinearDoubleKeyFrame Value="60" KeyTime="0:0:0"/>
                                <LinearDoubleKeyFrame Value="360" KeyTime="0:0:1"/>
                                <LinearDoubleKeyFrame Value="360" KeyTime="0:0:2"/>
                                <LinearDoubleKeyFrame Value="60" KeyTime="0:0:3"/>
                                <LinearDoubleKeyFrame Value="60" KeyTime="0:0:4"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="forButtonKeyFrame"
                                                           Storyboard.TargetProperty="(Canvas.Top)">
                                <LinearDoubleKeyFrame Value="30" KeyTime="0:0:0"/>
                                <LinearDoubleKeyFrame Value="30" KeyTime="0:0:1"/>
                                <LinearDoubleKeyFrame Value="100" KeyTime="0:0:2"/>
                                <LinearDoubleKeyFrame Value="100" KeyTime="0:0:3"/>
                                <LinearDoubleKeyFrame Value="30" KeyTime="0:0:4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </Canvas.Resources>
                    <Button x:Name="forButtonKeyFrame" Width="60" Height="30" Content="RUN!">
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.MouseEnter">
                                <BeginStoryboard Storyboard="{StaticResource sbMoveButtonWithKF}"/>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>
                </Canvas>
            </StackPanel>
        </TabItem>
        <TabItem Header="Example 5">
            <StackPanel Margin="10">
                <TextBlock Text="Path animaton" Margin="10"/>
                <Canvas>
                    <Canvas.Resources>
                        <!--First creat a PathGeometry object to define the path.
                        Later it'll be used in the StoryBoard.-->
                        <PathGeometry x:Key="pathMove" Figures="M 10,85
                                      A 100,70 0 1 1 210,85
                                      A 100,70 0 1 0 410,85
                                      A 130,70 0 1 0 150,85
                                      A 70,70 0 1 1 10,85"/>
                        <!--This animation uses the pathMove-->
                        <Storyboard x:Key="sbMoveButtonWithPath" RepeatBehavior="Forever">
                            <DoubleAnimationUsingPath Duration="0:0:4"
                                                      Storyboard.TargetName="btnMoveWithPath"
                                                      Storyboard.TargetProperty="(Canvas.Left)"
                                                      Source="X"
                                                      PathGeometry="{StaticResource pathMove}"/>
                            <DoubleAnimationUsingPath Duration="0:0:4"
                                                      Storyboard.TargetName="btnMoveWithPath"
                                                      Storyboard.TargetProperty="(Canvas.Top)"
                                                      Source="Y"
                                                      PathGeometry="{StaticResource pathMove}"/>
                            <DoubleAnimationUsingPath Duration="0:0:4"
                                                      Storyboard.TargetName="btnMoveWithPath"
                                                      Storyboard.TargetProperty="RenderTransform.Angle"
                                                      Source="Angle"
                                                      PathGeometry="{StaticResource pathMove}"/>
                        </Storyboard>
                    </Canvas.Resources>
                    <Button x:Name="btnMoveWithPath" Width="30" Height="30" >
                        <Button.RenderTransform>
                            <RotateTransform Angle="0"/>
                        </Button.RenderTransform>
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.MouseEnter">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Storyboard="{StaticResource sbMoveButtonWithPath}"/>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Button.Triggers>
                    </Button>
                </Canvas>
            </StackPanel>
        </TabItem>
        <TabItem Header="Last example">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="75"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0">
                    <StackPanel.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="Gray" Offset="0"/>
                            <GradientStop Color="White" Offset="1"/>
                        </LinearGradientBrush>
                    </StackPanel.Background>
                    <TextBlock Text="X0:"/>
                    <TextBox Name="tbX0" Text="10"/>
                    <TextBlock Text="Y0:"/>
                    <TextBox Name="tbY0" Text="10"/>
                    <TextBlock Text="Vx:"/>
                    <TextBox Name="tbVx" Text="20"/>
                    <TextBlock Text="Vy:"/>
                    <TextBox Name="tbVy" Text="20"/>
                    <TextBlock Text="Gravity:"/>
                    <TextBox Name="tbGravity" Text="9,8"/>
                    <TextBlock Text="TimeDelay:"/>
                    <TextBox Name="tbTimeDelay" Text="50"/>
                    <Separator Margin="0,15,0,10"/>
                    <Button Click="btnStart_Click" Content="Start" Width="50" Height="25" 
                            Margin="10,5,5,5" HorizontalAlignment="Left"/>
                    <Button Click="btnClose_Click" Content="Close" Width="50" Height="25" 
                            Margin="10,0,5,5" HorizontalAlignment="Left"/>
                </StackPanel>
                <Viewbox Stretch="Fill" Grid.Column="1">
                    <Border Margin="5" BorderBrush= "Black" BorderThickness="1" 
                            Grid.Column="1" HorizontalAlignment="Left">
                        <Canvas x:Name="canvas1" Width="345" Height="345" 
                                ClipToBounds="True" Background= "LightGray">
                            <Ellipse Name="ellipse" Width="10" Height="10" 
                                     Fill= "Red" Canvas.Bottom="20" Canvas.Left="20"/>
                            <TextBlock Name="tbXMax" Text="Maximum X distance:"/>
                            <TextBlock Name="tbYMax" Text="Maximum Y distance:" Canvas.Top="15"/>
                        </Canvas>
                    </Border>
                </Viewbox>
            </Grid>
        </TabItem>
        <TabItem Header="My own project">
            <Canvas>
                <Canvas.Background>
                    <ImageBrush ImageSource="Images\road.jpg"/>
                </Canvas.Background>
            </Canvas>
        </TabItem>
    </TabControl>
</Window>


..............................

using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace ExampleOfAnimationsN6._12._21
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        double XMin = 0;
        double YMin = 0;
        double XMax = 100;
        double YMax = 50;
        double X0 = 10;
        double Y0 = 10;
        double Vx = 10;
        double Vy = 10;
        double Gravity = 9.8;
        double TimeDelay = 50;
        double time = 0;
        double dt = 0.1;
        DispatcherTimer timer = new DispatcherTimer();
        Polyline pl = new Polyline();
        public MainWindow()
        {
            InitializeComponent();
            pl.Stroke = Brushes.Blue;
            canvas1.Children.Add(pl);
        }
        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            time = 0;
            dt = 0.1;
            if (canvas1.Children.Count > 3)
                canvas1.Children.Remove(pl);
            pl = new Polyline();
            pl.Stroke = Brushes.Blue;
            canvas1.Children.Add(pl);
            timer = new DispatcherTimer();
            X0 = Double.Parse(tbX0.Text);
            Y0 = Double.Parse(tbY0.Text);
            Vx = Double.Parse(tbVx.Text);
            Vy = Double.Parse(tbVy.Text);
            TimeDelay = Double.Parse(tbTimeDelay.Text);
            Gravity = Double.Parse(tbGravity.Text);
            // Get maximum x and y:
            double xm = 2 * Vx * Vy / Gravity;
            double ym = 0.5 * Vy * Vy / Gravity;
            double x1 = Math.Round(X0 + xm, 0);
            double y1 = Math.Round(Y0 + ym, 0);
            tbXMax.Text = "Maximum X Distance = " + x1.ToString() + "m";
            tbYMax.Text = "Maximum Y Distance = " + y1.ToString() + "m";
            timer.Interval = TimeSpan.FromMilliseconds(TimeDelay);
            timer.Tick += new EventHandler(timer_Tick);
            timer.Start();
        }
        private void timer_Tick(object sender, EventArgs e)
        {
            double x = X0 + Vx * time;
            double y = Y0 + Vy * time - 0.5 * Gravity * time * time;
            if (y >= Y0)
            {
                Canvas.SetLeft(ellipse, XNormalize(x));
                Canvas.SetTop(ellipse, YNormalize(y));
                pl.Points.Add(new Point(
                XNormalize(x) + 5, YNormalize(y) + 5));

            }
            else
            {
                timer.Stop();
                return;

            }
            time += dt;
        }
        private double XNormalize(double x)
        {
            double result = (x - XMin) *
            canvas1.Width / (XMax - XMin);
            return result;
        }
        private double YNormalize(double y)
        {
            double result = canvas1.Height - (y - YMin) *
            canvas1.Height / (YMax - YMin);
            return result;
        }
        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
    }
}
